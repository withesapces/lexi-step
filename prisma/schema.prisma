datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Mise à jour du modèle User pour inclure les relations
model User {
  id         String        @id @default(uuid())
  email      String        @unique
  password   String
  name       String
  createdAt  DateTime      @default(now())
  accounts   Account[]
  sessions   Session[]
  settings   UserSettings? // Relation avec les réglages de l'utilisateur
  userBadges UserBadge[]

  // Nouvelles relations pour les exercices d'écriture
  writingEntries WritingEntry[]
  writingStreak  WritingStreak?
}

model UserSettings {
  id            String   @id @default(uuid())
  userId        String   @unique
  dailyWordGoal Int      @default(200)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Ajoutez ces modèles après vos modèles existants

model Badge {
  id                 String   @id @default(uuid())
  defaultName        String? // Optionnel
  defaultDescription String? // Optionnel
  condition          String?
  conditionValue     Int?
  createdAt          DateTime @default(now())

  translations BadgeTranslation[]
  userBadges   UserBadge[]
}

model BadgeTranslation {
  id          String @id @default(uuid())
  badgeId     String
  badge       Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  locale      String // ex: "en", "fr"
  name        String
  description String

  @@unique([badgeId, locale])
}

model UserBadge {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId  String
  earnedAt DateTime @default(now())

  @@unique([userId, badgeId])
}

// Modèle principal pour tous les exercices d'écriture
model WritingEntry {
  id           String       @id @default(uuid())
  userId       String
  wordCount    Int
  exerciseType ExerciseType
  title        String?
  content      String       @db.Text
  userMood     String?      // Stocker l'humeur de l'utilisateur
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations avec les modèles spécifiques
  journalEntry       JournalEntry?
  freeWritingEntry   FreeWritingEntry?
  promptWritingEntry PromptWritingEntry?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// Types d'exercices disponibles
enum ExerciseType {
  JOURNAL_INTIME
  ECRITURE_LIBRE
  PROMPT_WRITING
  COLLABORATIVE_WRITING
}

// Modèle spécifique pour l'exercice "Journal Intime"
model JournalEntry {
  id          String   @id @default(uuid())
  entryId     String   @unique
  mood        String // Humeur de l'utilisateur
  inspiration String // Inspiration du jour
  createdAt   DateTime @default(now())

  // Relation avec l'entrée principale
  writingEntry WritingEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

// Modèle spécifique pour l'exercice "Écriture Libre"
model FreeWritingEntry {
  id              String          @id @default(uuid())
  entryId         String          @unique
  createdAt       DateTime        @default(now())

  // Relation avec l'entrée principale
  writingEntry WritingEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
}

// Niveaux de créativité disponibles pour l'exercice "Écriture Libre"
enum CreativityLevel {
  DEBUTANT
  INTERMEDIAIRE
  AVANCE
}

// Modèle spécifique pour l'exercice "Prompt Writing"
model PromptWritingEntry {
  id        String   @id @default(uuid())
  entryId   String   @unique
  promptId  String // Référence au prompt choisi
  createdAt DateTime @default(now())

  // Relation avec l'entrée principale
  writingEntry WritingEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  // Relation avec le prompt choisi
  prompt WritingPrompt @relation(fields: [promptId], references: [id])
}

// Modèle pour les prompts disponibles dans l'exercice "Prompt Writing"
model WritingPrompt {
  id        String   @id @default(uuid())
  text      String
  category  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relation avec les entrées qui utilisent ce prompt
  entries PromptWritingEntry[]
}

// Modèle pour suivre la streak (séquence) d'écriture de l'utilisateur
model WritingStreak {
  id             String    @id @default(uuid())
  userId         String    @unique
  currentStreak  Int       @default(0)
  longestStreak  Int       @default(0)
  lastWritingDay DateTime?
  updatedAt      DateTime  @updatedAt

  // Relation avec l'utilisateur
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
